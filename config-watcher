#!/bin/sh

old_hsh=''
new_hsh=''

set -euo pipefail

function main {
    check_env
    initialize
    watch_file
}

function check_env {
    set +u

    if [ -z "${VERBOSE}" ]; then
        # Prevent +u from throwing exceptions if not set
        VERBOSE=''
    fi

    if [ -z "${SLEEP}" ]; then
        SLEEP=1
    fi

    if [ -z "${SLEEP_BEFORE_KILL}" ]; then
        SLEEP_BEFORE_KILL=1
    fi

    if [ -z "${TARGET_FILE}" ]; then
        abort "Must specify TARGET_FILE"
    fi

    if [ -z "${RELOAD_SIGNAL}" ]; then
        abort "Must specify RELOAD_SIGNAL"
    fi

    if [ -z "${TARGET_PROCESS}" ] && [ -z "${TARGET_PID}" ]; then 
        abort "Must specify TARGET_PROCESS or TARGET_PID"]
    fi

    set -u
}

function initialize {
    # Initialize hash
    update_hash
    old_hsh=${new_hsh}
    log "Initialized hash to: ${old_hsh}"
}


function watch_file {
    while true; do
        update_hash

        if [ "${new_hsh}" = "${old_hsh}" ]; then
            debug 'No change in file detected'
        else
            log "File changed. Old hash: ${old_hsh}, New Hash: ${new_hsh}"
            old_hsh=${new_hsh}
            reload_application
        fi

        debug "Sleeping for: ${SLEEP}s"
        sleep $SLEEP
    done
}

function update_hash {
    if [ -f "${TARGET_FILE}" ]; then
        new_hsh=$(sha256sum $TARGET_FILE | cut -d' ' -f1)
    else
        log "No such file: ${TARGET_FILE}"
    fi
}

function reload_application {
    get_pid
    log "Sleeping for ${SLEEP_BEFORE_KILL}s to ensure config map updated in all containers"
    sleep ${SLEEP_BEFORE_KILL}
    log "Sending ${RELOAD_SIGNAL} to PID: ${pid}"
    kill -s ${RELOAD_SIGNAL} ${pid}
}

function get_pid {
    set +u
    if [ -n "${TARGET_PID}" ]; then
        pid=${TARGET_PID}
    else
        # In case of multiple processes, we'll use the one with the lowest PID.
        pid=$(pidof ${TARGET_PROCESS} | tr ' ' "\n" | sort -n | head -n1)
    fi
    set -u
}

function log {
    local msg=$1
    local ts=$(date '+%Y-%m-%d %H:%M:%S')

    echo "[${ts}] $msg"
}

function debug {
    local msg=$1
    if [ -n "${VERBOSE}" ]; then
        log "${msg}"
    fi
}

function abort {
    local msg=$1

    log "ERROR: ${msg}"
    exit 1
}

main
